#!/usr/bin/env python
import sys

s = """
../.. => ..#/#.#/###
#./.. => .#./#../###
##/.. => #.#/#.#/..#
.#/#. => .##/..#/#..
##/#. => #../#.#/#..
##/## => #.#/.#./#..
.../.../... => ####/##../#.../#...
#../.../... => ##.#/####/.#../....
.#./.../... => ...#/...#/#.../.##.
##./.../... => ###./#.##/#..#/...#
#.#/.../... => ##.#/###./.#.#/##..
###/.../... => .###/#..#/..##/.##.
.#./#../... => ####/#..#/#..#/#..#
##./#../... => #.##/###./##../#...
..#/#../... => ..##/.#.#/..#./.###
#.#/#../... => .##./.#../..#./###.
.##/#../... => ####/..../###./###.
###/#../... => .#.#/.###/##.#/#..#
.../.#./... => ..../.#../.##./..#.
#../.#./... => #.##/..#./####/#.##
.#./.#./... => .#.#/.###/#.#./.#.#
##./.#./... => #..#/#.#./...#/.###
#.#/.#./... => .##./#..#/####/.###
###/.#./... => #.../..../.#.#/##..
.#./##./... => #..#/..##/.##./.#.#
##./##./... => ..##/#..#/####/###.
..#/##./... => ####/.#.#/#.##/#.##
#.#/##./... => .###/...#/#.../...#
.##/##./... => ..##/.#.#/#.../##.#
###/##./... => ##../..#./..#./#...
.../#.#/... => .#.#/##../#..#/.#.#
#../#.#/... => #.##/...#/##../...#
.#./#.#/... => #.../..##/#..#/.##.
##./#.#/... => .##./..##/.#../..#.
#.#/#.#/... => .#../#..#/#.#./....
###/#.#/... => ##.#/..##/##../#...
.../###/... => #.../..#./##../#.##
#../###/... => ..#./#.../##../.##.
.#./###/... => ###./.#.#/..##/##.#
##./###/... => ##.#/#.../##.#/#.#.
#.#/###/... => ..##/...#/##../#..#
###/###/... => ##.#/.###/...#/#..#
..#/.../#.. => .##./#.##/..#./####
#.#/.../#.. => ..#./###./#.../##.#
.##/.../#.. => ...#/...#/.#../.###
###/.../#.. => .##./.#../##../#.#.
.##/#../#.. => ####/..##/#.../##..
###/#../#.. => #.../#..#/####/##..
..#/.#./#.. => .##./##.#/.#../###.
#.#/.#./#.. => ..../.###/###./.#.#
.##/.#./#.. => #.##/#..#/###./..#.
###/.#./#.. => #.../..#./##../.#.#
.##/##./#.. => .##./.#.#/#..#/#..#
###/##./#.. => .#../.#.#/#..#/....
#../..#/#.. => ####/..##/..##/.###
.#./..#/#.. => ###./.###/..#./##.#
##./..#/#.. => .###/####/#.../#.##
#.#/..#/#.. => #.##/#..#/.#.#/...#
.##/..#/#.. => #.../##../..##/##.#
###/..#/#.. => ###./##.#/#.../.#..
#../#.#/#.. => #.#./#.../##../..#.
.#./#.#/#.. => .###/#.#./...#/##.#
##./#.#/#.. => .#../#.##/##.#/#.#.
..#/#.#/#.. => .#../#..#/.#../.#.#
#.#/#.#/#.. => .#../.##./..../..#.
.##/#.#/#.. => .##./.#../####/#.##
###/#.#/#.. => ..#./##../##../#.#.
#../.##/#.. => #.##/.##./..#./..##
.#./.##/#.. => ###./#.#./#.../###.
##./.##/#.. => ####/#.../#.../#.#.
#.#/.##/#.. => .###/#..#/###./#..#
.##/.##/#.. => #.../####/###./###.
###/.##/#.. => .#../.#.#/##../.#..
#../###/#.. => ..#./.##./.###/##..
.#./###/#.. => ####/.##./####/....
##./###/#.. => #.../#.../#.##/.##.
..#/###/#.. => .#.#/.###/...#/....
#.#/###/#.. => ###./..##/.#../#.##
.##/###/#.. => ...#/.#../##../.#..
###/###/#.. => ...#/#.##/.#.#/..##
.#./#.#/.#. => .###/#.../..#./.##.
##./#.#/.#. => ###./##.#/..#./##.#
#.#/#.#/.#. => #.../##.#/..#./#...
###/#.#/.#. => ...#/...#/#..#/...#
.#./###/.#. => #.#./.##./#.#./.###
##./###/.#. => #.../####/..##/#...
#.#/###/.#. => ##../.##./.###/###.
###/###/.#. => ..#./.##./.#../#.#.
#.#/..#/##. => ...#/#.##/##../...#
###/..#/##. => ...#/#.../###./###.
.##/#.#/##. => ##.#/.#.#/.#../....
###/#.#/##. => .##./..../##.#/..#.
#.#/.##/##. => .#../###./#.#./##..
###/.##/##. => #.##/#..#/#.#./###.
.##/###/##. => #.##/###./..../##..
###/###/##. => .#../####/.###/##..
#.#/.../#.# => #.../#..#/..##/##.#
###/.../#.# => #..#/.#.#/####/#.##
###/#../#.# => ###./##../##.#/...#
#.#/.#./#.# => .##./.#.#/#.../...#
###/.#./#.# => .#../.#../..../#.#.
###/##./#.# => #.#./#.#./#.../.#..
#.#/#.#/#.# => ..../####/####/..#.
###/#.#/#.# => #..#/.##./#.../##..
#.#/###/#.# => ###./...#/#.##/##..
###/###/#.# => #.##/#.../#..#/###.
###/#.#/### => ..../...#/###./..#.
###/###/### => #..#/..../#.../#.##
""".strip()

class Rule():
  def __init__(self, pattern, mapsTo):
    self.pattern = pattern
    self.mapsTo = mapsTo

  def display(self):
    for l in self.pattern:
      print l
    print "=>"
    for l in self.mapsTo:
      print l
    print

def flip(mat):
  if len(mat) == 3:
    return [mat[2], mat[1], mat[0]]
  else:
    return [mat[1], mat[0]]

def rotate90(mat):
  result = []
  if len(mat) == 3:
    result.append(mat[2][0] + mat[1][0] + mat[0][0])
    result.append(mat[2][1] + mat[1][1] + mat[0][1])
    result.append(mat[2][2] + mat[1][2] + mat[0][2])
  else:
    result.append(mat[1][0] + mat[0][0])
    result.append(mat[1][1] + mat[0][1])
  return result

def findAllPatterns(mat):
  patterns = []
  patterns.append(mat)

  flipped = flip(mat)
  patterns.append(flipped)

  for _ in xrange(3):
    mat = rotate90(mat)
    flipped = rotate90(flipped)
    patterns.append(mat)
    patterns.append(flipped)
  return patterns

def findMapping(image, rules_l):
  patterns = findAllPatterns(image)
  for rule in rules_l:
    if rule.pattern in patterns:
      return rule.mapsTo

def printMat(mat):
  for r in mat:
    print r
  print

input_l = s.split('\n')
rules = []
for l in input_l:
  line = l.split(' => ')

  pattern = line[0].split('/')
  mapsTo = line[1].split('/')
  rules.append(Rule(pattern, mapsTo))
for rule in rules:
  rule.display()

image = [".#.",
         "..#",
         "###"]

allPatterns = findAllPatterns(image)
for pat in allPatterns:
  printMat(pat)

for rule in rules:
  if rule.pattern in allPatterns:
    print "Found correct rule"
    rule.display()

for _ in xrange(18):
  print "Iteration", _
  newImage = []
  assert(len(image) == len(image[0]))
  if len(image) % 2 == 0:
    image_len = len(image)
    sub_length = int(len(image) / 2)
    num_subimages = int(len(image) / 2) ** 2
    for _ in xrange((len(image) / 2) * 3):
      newImage.append("")
    
    sub_row = 0
    sub_col = 0  
    for sub in xrange(num_subimages):
      subimage = [image[sub_row * 2][sub_col * 2 : (sub_col + 1) * 2], 
                  image[sub_row * 2 + 1][sub_col * 2 : (sub_col + 1) * 2]]

      newSubImage = findMapping(subimage, rules)
      for ind, row in enumerate(newSubImage):
        newImage[sub_row * 3 + ind] += row
      
      sub_col = (sub_col + 1) % sub_length
      if sub_col == 0:
        sub_row += 1

  elif len(image) % 3 == 0:
    image_len = len(image)
    sub_length = int(len(image) / 3)
    num_subimages = int(len(image) / 3) ** 2
    for _ in xrange((len(image) / 3) * 4):
      newImage.append("")
    
    sub_row = 0
    sub_col = 0  
    for sub in xrange(num_subimages):
      subimage = [image[sub_row * 3][sub_col * 3 : (sub_col + 1) * 3], 
                  image[sub_row * 3 + 1][sub_col * 3 : (sub_col + 1) * 3],
                  image[sub_row * 3 + 2][sub_col * 3 : (sub_col + 1) * 3]]

      newSubImage = findMapping(subimage, rules)
      for ind, row in enumerate(newSubImage):
        newImage[sub_row * 4 + ind] += row
      
      sub_col = (sub_col + 1) % sub_length
      if sub_col == 0:
        sub_row += 1
  image = newImage
  numOn = 0
  for row in image:
    for c in row:
      if c == '#':
        numOn += 1

print numOn